snippet_support = true
verbosity = 2

[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "comment"
face = "comment"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["readonly"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["constant"]

[[semantic_tokens]]
token = "variable"
face = "variable"

[server]
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
timeout = 1800 # seconds = 30 minutes

# --------------- Languages --------------- #

[language.elixir]
filetypes = ["elixir"]
roots = ["mix.exs"]
command = "elixir-ls"

[language.elm]
filetypes = ["elm"]
roots = ["elm.json"]
command = "elm-language-server"

[language.elm.initialization_options]
elmPath = "elm"
elmFormatPath = "elm-format"
elmTestPath = "elm-test"
elmAnalyseTrigger = "change"

[language.typescript]
filetypes = ["typescript", "javascript"]
roots = ["tsconfig.json"]
command = "typescript-language-server"
args = ["--stdio"]

[language.typescript.initialization_options]
formatTool = "prettier"

[language.tsx]
filetypes = ["typescriptreact", "javascriptreact"]
roots = ["tsconfig.json"]
command = "typescript-language-server"
args = ["--stdio"]

[language.tsx.initialization_options]
formatTool = "prettier"

[language.vue]
filetypes = ["vue"]
roots = ["package.json"]
command = "vls"

[language.javascript]
filetypes = ["javascript"]
roots = ["package.json"]
command = "typescript-language-server"
args = ["--stdio"]

[language.csharp]
filetypes = ["csharp"]
roots = ["*.sln"]
command = "omnisharp-language-server"
args = ["-lsp"]

[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "json-languageserver"
args = ["--stdio"]

[language.css]
filetypes = ["css"]
roots = ["package.json"]
command = "css-languageserver"
args = ["--stdio"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "html-languageserver"
args = ["--stdio"]

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = ["-c", "if command -v rustup >/dev/null; then $(rustup which rust-analyzer); else rust-analyzer; fi"]

[language.rust.initialization_options]
diagnostics.disabled = ["unresolved-macro-call"]

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
offset_encoding = "utf-8"
